import java.util.Random;


public class Hangman2 extends WordGame
{
    Random generator = new Random();
    
    private String userInput;
    private String history;
    private int chancesLeft;
    private String guessField;
    private int wordIndex;
    private int random;
    private boolean letterAppears;
    private String usedField;
    
    private static final String BASIC_HANGMAN_MESSAGE = "Guess a Letter or the Word" + "\n" + "Guessing a Word wrong will cost you 2 chances!" + "\n";
    private static final String ALPHABET = "abcdefghkijklmnopqrstuvwxyz";
    
    private String[] word = new String[20]; 
    {
        word[0] = "music";
        word[1] = "television";
        word[2] = "cello";
        word[3] = "guitar";
        word[4] = "pillow";
        word[5] = "sofa";
        word[6] = "stand";
        word[7] = "bow";
        word[8] = "laptop";
        word[9] = "windows";
        word[9] = "java";
        word[10] = "computers";
        word[11] = "science";
        word[12] = "running";
        word[13] = "comedy";
        word[14] = "romance";
        word[15] = "drawing";
        word[16] = "soccer";
        word[17] = "movie";
        word[18] = "drama";
        word[19] = "food";
    }
    private String[] wordLetters = new String[0];
    private String[] usedLetters = new String [26];
    
    /** hangman sets the title as "Hangman"
     * initializes all the variables needed
     * @param none
     * @return none
     */
    public void hangman()
    {
        setTitle("Hangman");
        
        resetHangman();
        setText(history);
        
        while (continueGame())
            guessWord();
    }
    /**reset hangman resets all values used in hangman
     * @param
     * @return
     */
    private void resetHangman()
    {
        chancesLeft = 10;
        guessField = "";
        userInput = "";
        guessField = "";
        random = generator.nextInt(20);
        
        String[] wordLetters = new String[word[random].length()+1];
        
        for (int i = 0; i < word[random].length(); i++)
            wordLetters[i] = "_ ";
        for (int i = 0; i < word[random].length(); i++)
            guessField = guessField + wordLetters[i] + " ";
        
        history = BASIC_HANGMAN_MESSAGE 
                + "\n"
                + "Letters used: " + "\n"
                + "Chances Left: " + chancesLeft + "\n"
                + guessField;
    }
    
    /**guessWord takes in the user's input
     * and runs either checkLetter or checkString, then
     * it sets the guessField and text accordingly
     * @param none
     * @return none
     */
    private void guessWord()
    {
        if (chancesLeft > 0 && !userInput.equals(word[random]))
        {
            userInput = getGuess();
            guessField = "";
            
            if (userInput.length() == 1) checkLetter();
            else checkString();
            
            
        }
    }
    /** checkLetter compares the user input letter
     * to the letters of the word and replaces "_ "
     * with the letter if they match
     * @param none
     * @return none
     */
    private void checkLetter()
    {
        wordIndex = 0;
        letterAppears = false;
        while (wordIndex < word[random].length())
        {
            if (userInput.equals(word[random].substring(wordIndex,wordIndex+1)))
            {
                wordLetters[wordIndex] = word[random].substring(wordIndex, wordIndex+1); 
                letterAppears=true;
            }
            wordIndex++;
        }
        
        for (int i = 0; i < word[random].length(); i++)
            guessField = guessField + wordLetters[i] + " ";
        
        if (!(letterAppears==false)) //the input letter does appear
        {
            history = BASIC_HANGMAN_MESSAGE 
                    + "Nice guess!" + "\n"
                    + "Chances left:" + chancesLeft + "\n"
                    + guessField;
            setText(history);  
        }
        else //input does not appear
        {
            chancesLeft --;
            history = BASIC_HANGMAN_MESSAGE 
                    + "Oops!" + "\n"
                    + "Chances left:" + chancesLeft + "\n"
                    + guessField;
            setText(history);  
        }
    }
    /** checkString compares the user input string
     * to the word and replaces the whole guessField
     * with the letters of the word if they match.
     * It also runs resetHangman to get a new word 
     * for the next time the guessWord runs
     * @param none
     * @return none
     */
    private void checkString()
    {
        if (userInput.equals(word[random]))
        {
            for (int i = 0; i < word[random].length(); i++)
                guessField = guessField + word[random].substring(i,i+1) + " ";
            
            history = BASIC_HANGMAN_MESSAGE 
                    + "YAY Correct Word!" + "\n"
                    + "Chances left:" + chancesLeft + "\n"
                    + guessField + "\n"
                    + "Press Enter to play again";
            setText(history);  
            
            getGuess(); //to pause the game
            resetHangman();
            setText(history);  
        }
        else
        {
            chancesLeft = chancesLeft - 2;
            
            for (int i = 0; i < word[random].length(); i++)
                guessField = guessField + wordLetters[i] + " ";
            
            history = BASIC_HANGMAN_MESSAGE 
                    + "That's not the Word!" + "\n"
                    + "Chances left:" + chancesLeft + "\n"
                    + guessField;
            
            setText(history);  
        }
    }
}
