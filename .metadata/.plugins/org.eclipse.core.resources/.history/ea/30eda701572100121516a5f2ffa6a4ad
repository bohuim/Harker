import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/**
 * 
 * @author Dennis
 */
public class BlockDisplay implements KeyListener 
{
	private static final Color BACKGROUND = Color.BLACK;

	private MyBoundedGrid<Block> board;
	private JPanel[][] grid;
	private JPanel mainPanel;
	
	private MyBoundedGrid<Block> holdBoard;
	private JPanel[][] holdGrid;
	private JPanel holdPanel;
	
	private MyBoundedGrid<Block>[] nextBoard;
	private JPanel[][][] nextGrid;
	private JPanel[] nextPanel;
	private JPanel allNextPanels;
	
	private JFrame frame;
	private JLabel scoreLabel;
	private ArrowListener listener;

	// Constructs a new display for displaying the given board
	public BlockDisplay(MyBoundedGrid<Block> board, MyBoundedGrid<Block> holdB, MyBoundedGrid<Block>[] nextB)
	{
		this.board = board;
		grid = new JPanel[board.getNumRows()][board.getNumCols()];
		
		holdBoard = holdB;
		holdGrid = new JPanel[holdBoard.getNumRows()][holdBoard.getNumCols()];
		
		nextBoard = nextB;
		for (int i=0; i<nextBoard.length; i++)
		    nextGrid = new JPanel[i][holdBoard.getNumRows()][holdBoard.getNumCols()];

        //Schedule a job for the event-dispatching thread:
        //creating and showing this application's GUI.
        SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                createAndShowGUI();
            }
        });

		//Wait until display has been drawn
        try
        {
        	while (frame == null || !frame.isVisible())
        		Thread.sleep(1);
		}
		catch(InterruptedException e)
		{
			e.printStackTrace();
			System.exit(1);
		}
	}

    /**
     * Create the GUI and show it.  For thread safety,
     * this method should be invoked from the
     * event-dispatching thread.
     */
    private void createAndShowGUI()
    {
        //Create and set up the window.
        frame = new JFrame();
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.addKeyListener(this);
        frame.setFocusable(true);
        frame.setSize(395,438);
        frame.setLayout(null); //makes frame absolute control
        
        //main board
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayout(board.getNumRows(), board.getNumCols()));
        mainPanel.setLocation(95,0);
        mainPanel.setSize(200,400);
        mainPanel.setBorder(BorderFactory.createLineBorder(Color.RED));
        for (int row = 0; row < grid.length; row++)
        	for (int col = 0; col < grid[row].length; col++)
        	{
				grid[row][col] = new JPanel();
				grid[row][col].setBackground(BACKGROUND);
				grid[row][col].setPreferredSize(new Dimension(20, 20));
				mainPanel.add(grid[row][col]);
			}
        frame.add(mainPanel);
        
        //hold board
        holdPanel = new JPanel();
        holdPanel.setLayout(new GridLayout(holdBoard.getNumRows(), holdBoard.getNumCols()));
        holdPanel.setLocation(8,45);
        holdPanel.setSize(20*holdBoard.getNumRows(),20*holdBoard.getNumCols());
        holdPanel.setBorder(BorderFactory.createLineBorder(Color.WHITE));
        for (int row = 0; row < holdGrid.length; row++)
            for (int col = 0; col < holdGrid[row].length; col++)
            {
                holdGrid[row][col] = new JPanel();
                holdGrid[row][col].setBackground(BACKGROUND);
                holdGrid[row][col].setPreferredSize(new Dimension(20,20));
                holdPanel.add(holdGrid[row][col]);
            }
        frame.add(holdPanel);
        
        //next board
        nextPanel = new JPanel[5];
        allNextPanels = new JPanel();
        
        nextPanel[0] = new JPanel();
        nextPanel[0].setLayout(new GridLayout(holdBoard.getNumRows(), holdBoard.getNumCols()));
        nextPanel[0].setLocation(298,50);
        nextPanel[0].setSize(80,80);
        nextPanel[0].setBorder(BorderFactory.createLineBorder(Color.CYAN));
        for (int row = 0; row < nextGrid[0].length; row++)
            for (int col = 0; col < nextGrid[0][row].length; col++)
            {
                nextGrid[0][row][col] = new JPanel();
                nextGrid[0][row][col].setBackground(BACKGROUND);
                nextGrid[0][row][col].setPreferredSize(new Dimension(20,20));
                nextPanel[0].add(nextGrid[0][row][col]);
            }
        frame.add(nextPanel[0]);   
        
        
        
		//Show the board
		showMain();

        //Display the window.
        frame.setVisible(true);
    }

	/**
	 * Method: showMain()
	 * Usage: BlockDisplay.showMain();
	 * -------------------------------
	 * repaints the main game board
	 */
	public void showMain()
	{
		for (int row = 0; row < grid.length; row++)
			for (int col = 0; col < grid[row].length; col++)
			{
				Location loc = new Location(row, col);

				Block square = board.get(loc);

				if (square == null)
				{
					grid[row][col].setBackground(BACKGROUND);
					grid[row][col].setBorder(null);
				}
				else
				{
					grid[row][col].setBackground(square.getColor());
					grid[row][col].setBorder(BorderFactory.createLineBorder(Color.GRAY));
				}
			}
		
		
	}
	
	/**
     * Method: showHold()
     * Usage: BlockDisplay.showHold();
     * -------------------------------
     * repaints the hold board
     */
	public void showHold()
    {
        for (int row = 0; row < holdGrid.length; row++)
            for (int col = 0; col < holdGrid[row].length; col++)
            {
                Location loc = new Location(row, col);

                Block square = holdBoard.get(loc);

                if (square == null)
                {
                    holdGrid[row][col].setBackground(BACKGROUND);
                    holdGrid[row][col].setBorder(null);
                }
                else
                {
                    holdGrid[row][col].setBackground(square.getColor());
                    holdGrid[row][col].setBorder(BorderFactory.createLineBorder(Color.gray));
                }
            }      
    }
	
	public void updateScore(int lvl)
	{
	    //scoreLabel.setText("Level: " + lvl);
	}

	// Sets the title of the window.
	public void setTitle(String title)
	{
		frame.setTitle(title);
	}

	public void keyTyped(KeyEvent e)
	{
	}

	public void keyReleased(KeyEvent e)
	{
	}

	public void keyPressed(KeyEvent e)
	{
		if (listener == null)
			return;
		int code = e.getKeyCode();
		if (code == KeyEvent.VK_LEFT)
			listener.leftPressed();
		else if (code == KeyEvent.VK_RIGHT)
			listener.rightPressed();
		else if (code == KeyEvent.VK_DOWN)
			listener.downPressed();
		else if (code == KeyEvent.VK_UP)
			listener.upPressed();
		else if (code == KeyEvent.VK_SPACE)
		    listener.spacePressed();
		else if (code == KeyEvent.VK_SHIFT)
		    listener.shiftPressed();
	}

	public void setArrowListener(ArrowListener listener)
	{
		this.listener = listener;
	}
}