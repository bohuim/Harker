import java.awt.*;
import java.util.*;

/**
 * 
 * 
 * <b>Methods</b>
 * <ul>
 * 		<li></li>
 * </ul>
 * @author Dennis Moon
 * @version Apr 22, 2013
 * 
 * @Revision
 *     Apr 22, 2013
 */
public abstract class Piece
{
	//the board this piece is on
	private Board board;

	//the location of this piece on the board
	private Location location;

	//the color of the piece
	private Color color;

	//the file used to display this piece
	private String imageFileName;

	//the approximate value of this piece in a game of chess
	private int value;

	//constructs a new Piece with the given attributes.
	public Piece(Color col, String fileName, int val)
	{
		color = col;
		imageFileName = fileName;
		value = val;
	}

	//returns the board this piece is on
	public Board getBoard()
	{
		return board;
	}

	//returns the location of this piece on the board
	public Location getLocation()
	{
		return location;
	}

	//returns the color of this piece
	public Color getColor()
	{
		return color;
	}

	//returns the name of the file used to display this piece
	public String getImageFileName()
	{
		return imageFileName;
	}

	//returns a number representing the relative value of this piece
	public int getValue()
	{
		return value;
	}

    /**
     * Puts this piece into a board. If there is another piece at the given
     * location, it is removed. <br />
     * Precondition: (1) This piece is not contained in a grid (2)
     * <code>loc</code> is valid in <code>gr</code>
     * @param brd the board into which this piece should be placed
     * @param loc the location into which the piece should be placed
     */
    public void putSelfInGrid(Board brd, Location loc)
    {
        if (board != null)
            throw new IllegalStateException(
                    "This piece is already contained in a board.");

        Piece piece = brd.get(loc);
        if (piece != null)
            piece.removeSelfFromGrid();
        brd.put(loc, this);
        board = brd;
        location = loc;
    }

    /**
     * Removes this piece from its board. <br />
     * Precondition: This piece is contained in a board
     */
    public void removeSelfFromGrid()
    {
        if (board == null)
            throw new IllegalStateException(
                    "This piece is not contained in a board.");
        if (board.get(location) != this)
            throw new IllegalStateException(
                    "The board contains a different piece at location "
                            + location + ".");

        board.remove(location);
        board = null;
        location = null;
    }

    /**
     * Moves this piece to a new location. If there is another piece at the
     * given location, it is removed. <br />
     * Precondition: (1) This piece is contained in a grid (2)
     * <code>newLocation</code> is valid in the grid of this piece
     * @param newLocation the new location
     */
    public void moveTo(Location newLocation)
    {
        if (board == null)
            throw new IllegalStateException("This piece is not on a board.");
        if (board.get(location) != this)
            throw new IllegalStateException(
                    "The board contains a different piece at location "
                            + location + ".");
        if (!board.isValid(newLocation))
            throw new IllegalArgumentException("Location " + newLocation
                    + " is not valid.");

        if (newLocation.equals(location))
            return;
        board.remove(location);
        Piece other = board.get(newLocation);
        if (other != null)
            other.removeSelfFromGrid();
        location = newLocation;
        board.put(location, this);
    }
    
    /**
     * <b>Method: </b>isValidDestination</br> 
     * <b>Usage: </b>{@code piece.isValidDestination(dest)}</br>
     * -------------------------------</br>
     * If dest is valid on board and either empty or of different color, return true.
     * 
     * @param dest - loc to move piece to
     * @return true piece can be moved to dest
     */
    public boolean isValidDestination(Location dest)
    {
        if (board.isValid(dest) && (board.get(dest)==null || !board.get(dest).color.equals(color)))
            return true;
        return false;
    }
    
    /**
     * <b>Method: </b>destinations</br> 
     * <b>Usage: </b>{@code piece.destinations()}</br>
     * -------------------------------</br>
     * Returns the iterator to a set of all possible moves of this piece. </br>
     * Should be overridden by specific piece, a subclass
     * 
     * @return iterator to set of all possible moves
     */
    public abstract Iterator<Location> destinations();
    
    /**
     * <b>Method: </b>sweep</br> 
     * <b>Usage: </b>{@code piece.sweep(set, dir)}</br>
     * -------------------------------</br>
     * Adds all possible moves in a single given direction to the specified set.
     * Also adds the last location if 
     * 
     * @param dests
     * @param direction
     */
    public void sweep(Set<Location> dests, int direction)
    {
        Location loc = location.getAdjacentLocation(direction);
        while (isValidDestination(loc))
        {
            dests.add(loc);
            loc = loc.getAdjacentLocation(direction);
        }
        if (isValidDestination(loc))
            dests.add(loc);
    }
}