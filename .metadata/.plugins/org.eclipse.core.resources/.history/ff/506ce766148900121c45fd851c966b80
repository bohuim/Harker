import java.awt.*;
import java.awt.event.*;
import java.io.*;
import java.util.*;
import javax.swing.*;

/**
 * SolitaireDisplay shows the user the game board. 
 * 
 * @author Dennis Moon
 * @version Mar 6, 2013
 * 
 * @Revision:
 *     Mar 3, 2013 - downloaded, untouched </br>
 *     Mar 4, 2013 - modified to show top three cards of waste through an ArrayList. Provides public methods addWaste(), removeWaste(), clearWaste() to modify ArrayList. </br>
 *     Mar 5, 2013 - modified drawBorder() to draw a border around certain amouunt of selected cards. </br>
 *     Mar 6, 2013 - double click is shortcut for one card to foundation, right click is shortcut for all cards to foundation. </br>
 *                  hovering over a card now highlights it. </br>
 */
public class SolitaireDisplay extends JComponent implements MouseListener, MouseMotionListener
{
	private static final int CARD_WIDTH = 73;
	private static final int CARD_HEIGHT = 97;
	private static final int SPACING = 5;  //distance between cards
	private static final int FACE_UP_OFFSET = 16;  //distance for cascading face-up cards
	private static final int FACE_DOWN_OFFSET = 5;  //distance for cascading face-down cards

	private JFrame frame;
	private int selectedRow = -1;
	private int selectedCol = -1;
	private Solitaire game;

	private ArrayList<Card> wastes = new ArrayList<Card>();
	private int hoverRow = -1;
	private int hoverCol = -1;
	private double startTime;
	
	public SolitaireDisplay(Solitaire game)
	{
		this.game = game;

		frame = new JFrame("Solitaire");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.getContentPane().add(this);
		frame.addKeyListener(game);

		this.setPreferredSize(new Dimension(CARD_WIDTH * 7 + SPACING * 8, CARD_HEIGHT * 2 + SPACING * 3 + FACE_DOWN_OFFSET * 7 + 13 * FACE_UP_OFFSET));
		this.addMouseListener(this);
		this.addMouseMotionListener(this);

		frame.pack();
		frame.setVisible(true);
	}

	public void paintComponent(Graphics g)
	{   
		//background
		g.setColor(new Color(0, 128, 0));
		g.fillRect(0, 0, getWidth(), getHeight());

		//stock
		drawCard(g, game.getStockCard(), SPACING, SPACING);
		if (hoverRow == 0 && hoverCol == 0)
            drawBorder(g, Color.YELLOW, 0, SPACING, SPACING);

		//waste
		for (int i=0; i<wastes.size(); i++)
		    drawCard(g, wastes.get(i), SPACING * 2 + CARD_WIDTH + (i*FACE_UP_OFFSET), SPACING);
		if (selectedRow == 0 && selectedCol == 1 && wastes.size()!=0)
			drawBorder(g, Color.ORANGE, 0, SPACING * 2 + CARD_WIDTH + ((wastes.size()-1)*FACE_UP_OFFSET), SPACING);
		else if (hoverRow == 0 && hoverCol == 1 && wastes.size()!=0)
		    drawBorder(g, Color.YELLOW, 0, SPACING * 2 + CARD_WIDTH + ((wastes.size()-1)*FACE_UP_OFFSET), SPACING);
		    
		//foundation
		for (int i = 0; i < 4; i++)
			drawCard(g, game.getFoundationCard(i), SPACING * (4 + i) + CARD_WIDTH * (3 + i), SPACING);
		if (selectedRow == 0 && selectedCol >= 3 && game.getFoundationCard(selectedCol-3)!=null)
		    drawBorder(g, Color.ORANGE, 0, SPACING * (4 + selectedCol-3) + CARD_WIDTH * (3 + selectedCol-3), SPACING);
		else if (hoverRow == 0 && hoverCol >= 3 && game.getFoundationCard(hoverCol-3)!=null)
		    drawBorder(g, Color.YELLOW, 0, SPACING * (4 + hoverCol-3) + CARD_WIDTH * (3 + hoverCol-3), SPACING);
		    
		//piles
		for (int i = 0; i < 7; i++)
		{
			Stack<Card> pile = game.getPile(i);
			int offset = 0;
			for (int j = 0; j < pile.size(); j++)
			{
				drawCard(g, pile.get(j), SPACING + (CARD_WIDTH + SPACING) * i, CARD_HEIGHT + 2 * SPACING + offset);
				if (selectedRow == 1 && selectedCol == i && j == pile.size() - 1)
					drawBorder(g, Color.ORANGE, (FACE_UP_OFFSET)*(game.getSelectedNumber()-1), SPACING + (CARD_WIDTH + SPACING) * i, CARD_HEIGHT + 2 * SPACING + offset - (FACE_UP_OFFSET)*(game.getSelectedNumber()-1));
				else if (hoverRow == 1 && hoverCol == i && j == pile.size() - 1)
				    drawBorder(g, Color.YELLOW, 0, SPACING + (CARD_WIDTH + SPACING) * i, CARD_HEIGHT + 2 * SPACING + offset);
				
				if (pile.get(j).isFaceUp())
					offset += FACE_UP_OFFSET;
				else
					offset += FACE_DOWN_OFFSET;
			}
		}
	}
	
	/**
	 * <b>Method: </b>addWaste</br> 
	 * <b>Usage: </b>{@code display.addWaste(card)}</br>
	 * -------------------------------</br>
	 * Adds the given card to ArrayList of 3 waste cards to show.
	 * 
	 * @postcondition wastes.size() <= 3
	 * @param card to add & show
	 */
	public void addWaste(Card card)
	{
	    wastes.add(card);
	}
	
	/**
	 * <b>Method: </b>clearWastes</br> 
	 * <b>Usage: </b>{@code display.clearWastes()}</br>
	 * -------------------------------</br>
	 * Empties the ArrayList of displayed waste cards.
	 */
	public void clearWastes()
	{
	    wastes.clear();
	}
	
	/**
	 * <b>Method: </b>removeWaste</br> 
	 * <b>Usage: </b>{@code display.removeWaste()}</br>
	 * -------------------------------</br>
	 * Removes the top displayed waste card and returns true if wastes is empty. </br>
	 * 
	 * @return true if removing emptied wastes.
	 */
	public boolean removeWaste()
	{
	    wastes.remove(wastes.size()-1);
	    if (wastes.size()==0)
	        return true;
	    return false;
	}

	
	private void drawCard(Graphics g, Card card, int x, int y)
	{
		if (card == null)
		{
			g.setColor(Color.BLACK);
			g.drawRect(x, y, CARD_WIDTH, CARD_HEIGHT);
		}
		else
		{
			String fileName = card.getFileName();
			if (!new File(fileName).exists())
				throw new IllegalArgumentException("bad file name:  " + fileName);
			Image image = new ImageIcon(fileName).getImage();
			g.drawImage(image, x, y, CARD_WIDTH, CARD_HEIGHT, null);
		}
	}

	public void mouseExited(MouseEvent e)
	{
	}

	public void mouseEntered(MouseEvent e)
	{
	}

	public void mouseReleased(MouseEvent e)
	{
	}

	public void mousePressed(MouseEvent e)
	{
	}

	/**
	 * <b>Method: </b>mouseClicked</br> 
	 * <b>Usage: </b>{@code mouseClicked()}</br>
	 * -------------------------------</br>
	 * Calculates where the clicked happened in terms of col & row of the board. </br>
	 * <ul>
	 *     <li> Right click - {@code game.allShortcut()} is called. </li>
	 *     <li> Row: 0, Col: 0 - stock is clicked. </li>
	 *     <li> Row: 0, Col: 1 - waste is clicked. {@code shortCutFromWaste()} if double clicked. </li>
	 *     <li> Row: 0, Col >= 3 - a foundation is clicked. </li>
	 *     <li> Row: 1 - a pile is clicked. {@code shortCutFromPile(col)} if double clicked. <li>
	 * </ul>
	 * 
	 * @param e - the MouseEvent
	 */
	public void mouseClicked(MouseEvent e)
	{    
		//none selected previously
		int col = e.getX() / (SPACING + CARD_WIDTH);
		int row = e.getY() / (SPACING + CARD_HEIGHT);
		if (row > 1)
			row = 1;
		if (col > 6)
			col = 6;

		if (e.getButton() == MouseEvent.BUTTON3) //right click
		    game.allShortcut(true);
		else if (row == 0 && col == 0)
			game.stockClicked();
		else if (row == 0 && col == 1)
		{
			game.wasteClicked();
			if (e.getClickCount() > 1)
                game.shortcutFromWaste();
		}
		else if (row == 0 && col >= 3)
			game.foundationClicked(col - 3);
		else if (row == 1)
		{
			if (e.getClickCount() > 1)
			    game.shortcutFromPile(col);
			else
			    game.pileClicked(col);
		}
		repaint();
	}

	/**
	 * <b>Method: </b>drawBorder</br> 
	 * <b>Usage: </b>{@code drawBorder(g, extraH, x, y)}</br>
	 * -------------------------------</br>
	 * Draws a yellow border with top left corner (x, y) that encapsulates one card.
	 * Modified so that extraHeight can be added to encapsulate more than one card.
	 * 
	 * @param g - graphics
	 * @param extraHeight to cover more cards
	 * @param x coordinate of border's top left corner
	 * @param y coordinate of border's top left corner
	 */
	private void drawBorder(Graphics g, Color color, int extraHeight, int x, int y)
	{
		g.setColor(color);
		g.drawRect(x, y, CARD_WIDTH, CARD_HEIGHT + extraHeight);
		g.drawRect(x + 1, y + 1, CARD_WIDTH - 2, CARD_HEIGHT - 2 + extraHeight);
		g.drawRect(x + 2, y + 2, CARD_WIDTH - 4, CARD_HEIGHT - 4 + extraHeight);
	}

	/**
	 * <b>Method: </b></br> 
	 * <b>Usage: </b>{@code }</br>
	 * -------------------------------</br>
	 *
	 */
	public void unselect()
	{
		selectedRow = -1;
		selectedCol = -1;
	}

	public boolean isWasteSelected()
	{
		return selectedRow == 0 && selectedCol == 1;
	}

	public void selectWaste()
	{
		selectedRow = 0;
		selectedCol = 1;
	}

	public boolean isPileSelected()
	{
		return selectedRow == 1;
	}

	public int selectedPile()
	{
		if (selectedRow == 1)
			return selectedCol;
		else
			return -1;
	}

	public void selectPile(int index)
	{
		selectedRow = 1;
		selectedCol = index;
	}
	
	public void selectFoundation(int index)
	{
	    selectedRow = 0;
	    selectedCol = 3 + index;
	}
	
	public int selectedFoundation()
	{
	    if (selectedRow == 0)
	        return selectedCol - 3;
	    return -1;
	}
	
	public boolean isFoundationClicked()
	{
	    return selectedRow==0 && selectedCol >= 3;
	}
	
	/**<b>Method: </b>mouseMoved</br> 
     * <b>Usage: </b>{@code mouseMoved()}</br>
     * -------------------------------</br>
     * Everytime mouse is moved, its location is calculated in row & col. </br>
     * HoverRow & Col invoke paintComponent to draw a border around hovering card. </br>
     * 
     * @param e - MouseEvent
     */
    public void mouseMoved(MouseEvent e)
    {
        int col = e.getX() / (SPACING + CARD_WIDTH);
        int row = e.getY() / (SPACING + CARD_HEIGHT);
        if (row > 1)
            row = 1;
        if (col > 6)
            col = 6;
        
        hoverRow = row;
        hoverCol = col;
        repaint();
    }
	
    public void mouseDragged(MouseEvent e){}
}