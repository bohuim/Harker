import java.awt.*;
import java.util.*;

/**
 * SmartPlayer is an advanced AI opponent that, instead of choosing a random Move, calculates one step into the future and uses the best Move </br></br>
 * 
 * <b>Methods</b>
 * <ul>
 * 		<li>{@code nextMove()} returns the best Move available at the moment</li>
 * </ul>
 * 
 * @author Dennis Moon
 * @version May 15, 2013
 * 
 * @Revision
 *     May 15, 2013 - created and finshed class
 */
public class SmartPlayer extends Player
{

    /**<b>Constructor: </b>SmartPlayer</br> 
     * <b>Usage: </b>{@code Player p2 = new SmartPlayer(name, color, board)}</br>
     * -------------------------------</br>
     * Creates a new SmartPlayer by calling constructor of Player class.
     * 
     * @param name of SmartPlayer
     * @param color of SmartPlayer
     * @param board of chess game
     */
    public SmartPlayer(String name, Color color, Board board)
    {
        super(name, color, board);
    }

    /**<b>Method: </b>nextMove</br> 
     * <b>Usage: </b>{@code player.nextMove()}</br>
     * -------------------------------</br>
     * Returns the best move by checking one step into the future. </br>
     * Checks the board status for SmartPlayer after all available moves, selects the best move, and undoes the move. </br>
     * 
     * @return best Move after calculating one step ahead
     */
    public Move nextMove()
    {
        Iterator<Move> it = getBoard().allMoves(getColor()).iterator();
        Move bestMove = null;
        
        //Lvl 1 - Offensive: 1 step ahead, chooses move with highest score result
        /* 
        int max = -1000;
        while(it.hasNext())
        {
            Move testMove = it.next();
            getBoard().executeMove(testMove);
            
            int testScore = score();
            if (testScore > max)
            {
                max = testScore;
                bestMove = testMove;
            }
            
            getBoard().undoMove();
        }
        */
        
        //Lvl 2 - Defensive: 2 step ahead, chooses move with least damage; uses helper valueOfMeanestValue()
        int max = -1000;
        while (it.hasNext())
        {
            Move testMove = it.next();
            getBoard().executeMove(testMove);
            
            int testScore = valueOfMeanestRepsonse(2);
            if (testScore > max)
            {
                max = testScore;
                bestMove = testMove;
            }
            getBoard().undoMove();
        }
        
        //Lvl 3 - Defensive: variable steps ahead, can be as smart as user wishes
        
        
        return bestMove;
    }
    
    /**
     * <b>Method: </b>valueOfMeanestResponse</br> 
     * <b>Usage: </b>{@code valueOfMeanestResponse()}</br>
     * -------------------------------</br>
     * Tests all moves opponent can make by executing and scoring the moves. </br>
     * Returns the score under the assumption opponent makes his/her best move possible. </br>
     * 
     * @return score for most dangerous enemy response
     */
    //private int valueOfMeanestResponse()
    private int valueOfMeanestRepsonse(int n)
    {
        /*
         if (n==0)
             return score();
         */
        
        Color enemyColor = getBoard().enemyColorOf(getColor());
        Iterator<Move> it = getBoard().allMoves(enemyColor).iterator();
        
        int min = 0; 
        while(it.hasNext())
        {
            Move testMove = it.next();
            getBoard().executeMove(testMove);
            
            //int testScore = score();
            int testScore = valueOfBestMove(n-1);
            if (testScore < min)
                min = testScore;
            
            getBoard().undoMove();
        }
        return min;
    }
    
    private int valueOfBestMove(int n)
    {
        if (n==0)
            return score();
        
        Iterator<Move> it = getBoard().allMoves(getColor()).iterator();
        
        int max = -1000;
        while(it.hasNext())
        {
            Move testMove = it.next();
            getBoard().executeMove(testMove);
            
            int testScore = valueOfMeanestRepsonse(n-1);
            if (testScore > max)
                max = testScore;
            
            getBoard().undoMove();
        }
        return max;
    }
    
    /**
     * <b>Method: </b>score</br> 
     * <b>Usage: </b>{@code score()}</br>
     * -------------------------------</br>
     * Returns the total sum of SmartPlayer's pieces subtract the sum of enemy's pieces. </br>
     * Runs a nested for loop, adding to sum SmartPlayer's pieces and subtracting enemy's pieces. </br>
     * 
     * @return sum of SmartPlayer's pieces - sum of enemy's pieces
     */
    private int score()
    {
        int sum = 0;
        for (int row=0; row<getBoard().getNumRows(); row++)
            for (int col=0; col<getBoard().getNumCols(); col++)
            {
                Piece piece = getBoard().get(new Location(row, col));
                if (piece!=null)
                {
                    if (piece.getColor().equals(getColor()))
                        sum += piece.getValue();
                    else
                        sum -= piece.getValue();
                }
            }
        return sum;
    }
}
