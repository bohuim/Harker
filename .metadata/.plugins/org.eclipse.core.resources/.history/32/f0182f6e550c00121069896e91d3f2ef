import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
/**
 * LanderGUI manages the graphical user interface for the Lunar Lander
 * @author Stuart Regis
 *         Revised: Jan. 2007 Mr. Page
 * @version 010407
 */
public class GuitarGui
{
    private JFrame frame;
    
    private Instrument piano;

    /**
     * Constructor for objects of class LanderGui
     */
    public GuitarGui(Instrument h)
    {
        piano = h;
        // schedule a job for the event-dispatching thread to
        // create and show this GUI
        SwingUtilities.invokeLater(new Runnable()
        {
            public void run()
            {
                createAndShowGUI();
            }
        });
        
        // wait until the display has been drawn
        try
        {
            while(frame == null || !frame.isVisible())
                Thread.sleep(1);
        }
        catch (InterruptedException e)
        {
            e.printStackTrace();
            System.exit(1);
        }
    }
    // create and show this application's GUI
    private void createAndShowGUI()
    {
       
        frame = new JFrame("Lunar Lander");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setPreferredSize(new Dimension(300,500));


        frame.add(createButtonPanel(), BorderLayout.NORTH);
        frame.pack();
        frame.setVisible(true);
    }

    private JPanel createButtonPanel()
    {
        // post: creates and returns a JPanel with buttons
        //       for reseting the simulation and for applying
        //       thrust
        JPanel buttons = new JPanel();

        JButton c = new JButton("C");
        // add an inner class to handle the action
        c.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                
                piano.playNote("a");
            }
        });
        buttons.add(c);
        
        JButton e = new JButton("E");
        // add an inner class to handle the action
        e.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                
            	piano.playNote("d");
            }
        });
        buttons.add(e);
        
        JButton g = new JButton("G");
        // add an inner class to handle the action
        g.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent e)
            {
                
            	piano.playNote("g");
            }
        });
        buttons.add(g);
        
        return buttons;
    }
}
