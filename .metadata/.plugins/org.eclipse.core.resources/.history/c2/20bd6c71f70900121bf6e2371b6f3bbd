
/**
 * A class that can make and play multiple guitar strings
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Instrument implements Runnable
{
	private WordGameDisplay display;
	
	/** 
     * 0: C 
     * 1: C#/Db
     * 2: D
     * 3: D#/Eb
     * 4: E
     * 5: F
     * 6: F#
     * 7: G
     * 8: G#/Ab
     * 9: A
     * 10: Bb
     * 11: B
    */
    // Note :  C        C#      D       D#/Eb   E       F       F#      G       G#/Ab   A       Bb      B
    // Lvl 2:  65.41	69.30	73.42	77.78	82.41	87.31	92.50	98.00	103.8	110.0	116.5	123.5
    // Lvl 3:  130.8	138.6	146.8	155.6	164.8	174.6	185.0	196.0	207.7	220.0	233.1	246.9
    // Lvl 4:  261.6	277.2	293.7	311.1	329.6	349.2	370.0	392.0	415.3	440.0	466.2	493.9
    // Lvl 5:  523.3	554.4	587.3	622.3	659.3	698.5	740.0	784.0	830.6	880.0	932.3	987.8
    
    /**Keyboard layout
     * 
     * Notes:C  C#  D  D#  E  F  F#  G  G#  A  Bb  B  C  C#  D  D#  E
     * Keys: a  w   s  e   d  f  t   g  y   h  u   j  k  o   l  p   ;
     */
    
	private String userInput;
	
	private double sum = 0;
	private double combined;
	private int name;
	private int level;
	private String[] chord;
	private int[] chordNum;
    public GuitarString[][] note = new GuitarString[12][2];
    {
    	for (int i = 0; i < 12; i++)
    	{
    		for (int n = 0; n < 2; n++)
    		{
    			note[i][n] = new GuitarString(setFrequency(i),n+3);
    		}
    	}
    }
    
    public Instrument()
    {
    	//display = new WordGameDisplay();
    }
    
    /**Used for creating the array of notes (or guitar strings)
     * sets the frequency according to the chart above
     * @param int i 
     * @return frequencies of notes
     */
    private double setFrequency(int i)
    {
    	if (i == 0) return 65.41;
    	else if (i == 1) return 69.30;
    	else if (i == 2) return 73.42;
    	else if (i == 3) return 77.78;
    	else if (i == 4) return 82.41;
    	else if (i == 5) return 87.31;
    	else if (i == 6) return 92.50;
    	else if (i == 7) return 98.00;
    	else if (i == 8) return 103.8;
    	else if (i == 9) return 110.0;
    	else if (i == 10) return 116.5;
    	return 123.5; //if 11

    }
    
    /**
     * uses word game display to get the userInput and calls makeNote
     * multiple multiple notes can be pressed together to make a chord
     * @param none
     * @return none
     */
    public void playIt()
    {
    	while (true)
    	{
    		userInput = display.getGuess();
    		display.setText("You played: " + setName(userInput));
    		makeNote(userInput);
    	}
    }
    
    /**
     * makeNote takes in a string and puts them into arrays for setNote
     * and plays the note setNote returns
     * if multiple keys are inputed, it makes a chord
     * @param h
     * @return none
     */
    public void makeNote(String h)
    {	
    	chord = new String[h.length()];
    	chordNum = new int[h.length()];
    	for (int i = 0; i < h.length(); i++)
    	{
    		chord[i] = h.substring(i, i+1);
    		chordNum[i] = setNote(chord[i]);
    		
    		note[chordNum[i]][setLevel(chord[i])].pluck();
    	}
    	
    	for (int i = 0; i < 25000; i++)
        {
        	updateTic();
            playNote();
        }
    }
    
    /**
     * takes in a String to convert into an int for makeNote to use the correct note
     * @param keyboard key pressed
     * @return int of the note
     */
    public int setNote(String h)
    {
    	if (h.equals("a")) return 0;
    	else if (h.equals("w")) return 1;
    	else if (h.equals("s")) return 2;
    	else if (h.equals("e")) return 3;
    	else if (h.equals("d")) return 4;
    	else if (h.equals("f")) return 5;
    	else if (h.equals("t")) return 6;
    	else if (h.equals("g")) return 7;
    	else if (h.equals("y")) return 8;
    	else if (h.equals("h")) return 9;
    	else if (h.equals("u")) return 10;
    	else if (h.equals("j")) return 11;
    	else if (h.equals("k")) return 0;
    	else if (h.equals("o")) return 1;
    	else if (h.equals("l")) return 2;
    	else if (h.equals("p")) return 3;
    	else if (h.equals(";")) return 4;
    	
    	return 0;
    }
    
    /**
     * takes in the keyboard key and converts it into the name of the note being played
     * @param String keyboard key pressed
     * @return String name of note
     */
    private String setName(String h)
    {
    	if (h.equals("a")) return "C";
    	else if (h.equals("w")) return "C#/Db";
    	else if (h.equals("s")) return "D";
    	else if (h.equals("e")) return "D#/Eb";
    	else if (h.equals("d")) return "E";
    	else if (h.equals("f")) return "F";
    	else if (h.equals("t")) return "F#/Gb";
    	else if (h.equals("g")) return "G";
    	else if (h.equals("y")) return "G#/Ab";
    	else if (h.equals("h")) return "A";
    	else if (h.equals("u")) return "Bb/A#";
    	else if (h.equals("j")) return "B";
    	else if (h.equals("k")) return "C";
    	else if (h.equals("o")) return "C#/Db";
    	else if (h.equals("l")) return "D";
    	else if (h.equals("p")) return "D#/Eb";
    	else if (h.equals(";")) return "E";
    	
    	return "C";
    }
    
    /**
     * updateTic calls tic for all the notes pressed
     * @param none
     * @return none
     */
    private void updateTic()
    {
    	for(int i = 0; i < chord.length; i++)
    		note[chordNum[i]][setLevel(chord[i])].tic();
    }
    
    /**
     * playNote calls sample for all the notes pressed and adds the samples
     * then played 
     * @param none
     * @return none
     */
    private void playNote()
    {
    	combined = 0;
    	for(int i = 0; i < chord.length; i++)
        	combined += note[chordNum[i]][setLevel(chord[i])].sample();
    	
    	AudioLib.play(combined);
    }
    
    /**
     * setLevel changes level according to the note pressed
     * @param keyboard input
     * @return none
     */
    public int setLevel(String h)
    {
    	if (h.equals("k") || h.equals("o") || h.equals("l") || h.equals("p") || h.equals(";") || h.equals("'")) 
    		return 1;
    	return 0;
    }
    
    /** pluckNote takes in a keyboard key and plucks the note
     * @param string name recieved from the InputDataHandler class
     * @return none
     */
    public void pluckNote(String h)
    {
    	name = setNote(h);
    	level = setLevel(h);
    	
    	if (note[name][level].isEmpty())
    		note[name][level].pluck();
    	else 
    	{
    		sum = 0;
    		note[name][level].silence();
    		note[name][level].pluck();
    	}
    }
    
    /** update tics all the strings and adds all the samples of the strings
     * @param none
     * @return none
     */
    private void update()
    {
    	sum = 0;
    	for (int i = 0; i < 12; i++)
    	{
    		for (int n = 0; n < 2; n++)
    		{
    			note[i][n].tic();
    			sum += note[i][n].sample();
    		}
    	}
    }
   
    /**constantly run in a separate thread
     * it calls update
     * then plays the sum update changed it
     * @param none
     * @return none
     */
    public void run()
    {
    	while (true)
    	{
    		update();
    		System.out.println(sum);
			AudioLib.play(sum);
    	}
    }
}
