import java.util.Iterator;
import java.util.ListIterator;

public class MyArrayList<E>
{
	private int size;
	private Object[] values;  //(Java doesn't let us make an array of type E)

	public MyArrayList()
	{
		size = 0;
		values = new Object[1];
	}

	public String toString()
	{
		if (size == 0)
			return "[]";

		String s = "[";
		for (int i = 0; i < size - 1; i++)
			s += values[i] + ", ";
		return s + values[size - 1] + "]";
	}

	//postcondition: replaces the array with one that is
	//               twice as long, and copies all of the
	//               old elements into it
	private void doubleCapacity()
	{
	    Object[] oldValues = values;
	    values = new Object[oldValues.length*2];
	    
	    for (int i=0; i<oldValues.length; i++)
	        values[i] = oldValues[i];
	}

	//postcondition: returns the length of the array
	public int getCapacity()
	{
		return values.length;
	}

	/**
	 * returns the number of elements in this ArrayList
	 * @return size - number of elements in this ArrayList
	 */
	public int size()
	{
		return size;
	}

	public E get(int index)
	{
		return (E)values[index];

		//(You will need to promise the return value is of type E.)
	}

	//postcondition: replaces the element at position index with obj
	//               returns the element formerly at the specified position
	public E set(int index, E obj)
	{
		Object oldObject = values[index];
		
		values[index] = obj;
		
		return (E) oldObject;

		//(You will need to promise the return value is of type E.)
	}

	//postcondition: appends obj to end of list; returns true
	public boolean add(E obj)
	{
		/* if values is already full, call doubleCapacity before adding */

		if (size==getCapacity())
		    doubleCapacity();
		
		values[size]=obj;
		
		size++;
		
		return true;
	}

	//postcondition: removes element from position index, moving elements
	//               at position index + 1 and higher to the left
	//               (subtracts 1 from their indices) and adjusts size
	//               returns the element formerly at the specified position
	public E remove(int index)
	{
		Object oldObject = values[index];
		size--;
		
		for (int i=index; i<size; i++)
		    values[i] = values[i+1];
		return (E) oldObject;

		//(You will need to promise the return value is of type E.)
	}

	public Iterator<E> iterator()
	{
		return new MyArrayListIterator();
	}

	//precondition:  0 <= index <= size
	//postcondition: inserts obj at position index,
	//               moving elements at position index and higher
	//               to the right (adds 1 to their indices) and adjusts size
	public void add(int index, E obj)
	{
	    for (int i=size-1; i>index; i--)
	        values[i] = values[i-1];
	    values[index] = obj;
	}

	private class MyArrayListIterator implements Iterator<E>
	{
		//the index of the value that will be returned by next()
		private int nextIndex;

		public MyArrayListIterator()
		{
			throw new RuntimeException("COMPLETE FOR ADDITIONAL CREDIT");
		}

		public boolean hasNext()
		{
			throw new RuntimeException("COMPLETE FOR ADDITIONAL CREDIT");
		}

		public E next()
		{
			throw new RuntimeException("COMPLETE FOR ADDITIONAL CREDIT");

			//(You will need to promise the return value is of type E.)
		}

		//postcondition: removes the last element that was returned by next
		public void remove()
		{
			throw new RuntimeException("COMPLETE FOR ADDITIONAL CREDIT");
		}
	}
}