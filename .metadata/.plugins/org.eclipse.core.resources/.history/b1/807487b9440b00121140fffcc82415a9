/**
 * Write a description of class GuitarString here.
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
public class Note 
{
    public static final int A = 0;
    public static final int Bb = 1;
    public static final int B = 2;
    public static final int C = 3;
    public static final int Cs = 4;
    public static final int D = 5;
    public static final int Ds = 6;
    public static final int E = 7;
    public static final int F = 8;
    public static final int Fs = 9;
    public static final int G = 10;
    public static final int Gs = 11;
    
    private RingBuffer buffer;    
    
    private double frequency;
    private double power;
    private int capacity;
    private int ticCount;
    
    public double ticSum;
    
    private static final int SAMPLE_RATE = 44100;
    private final double ENERGY_DECAY = 1;

    /**create a quitar string of the given frequency and level
     */
    public Note(int noteName) 
    {
        power = noteName/12.0;
    	frequency = 440 * Math.pow(2, power);
        capacity = (int) (SAMPLE_RATE/frequency + 0.5);
        buffer = new RingBuffer(capacity);
    }
    
    public double getFreqeuncy()
    {
        return power;
    }
    
    /** create a guitar string whose size and initial values are given by the arrary
     */
    public Note(double[] init) 
    {
        capacity = init.length;
        buffer = new RingBuffer(capacity);
    }
    
    /** set the buffer to white noise
     */
    public void pluck() 
    {
        for (int i = 0; i < capacity; i++)
            buffer.enqueue (Math.random() - 0.5);
    }
    
    /** set the buffer to zeros
     */
    public void silence()
    {
    	for (int i = 0; i < capacity; i++)
            buffer.enqueue (0);
    }
    
    /** advance the simulation one time step
     */
    public void tic() 
    {
        buffer.enqueue(ENERGY_DECAY*(buffer.dequeue() + buffer.peek())/2);
        ticCount++;
    }
    
    /** return the current sample
     */
    public double sample() 
    {
        return buffer.peek();
    }
    
    /** return number of tics
     */
    public int time()
    {
        return ticCount;
    }
    
    /** return if this string is plucked or not
     */
    public boolean isEmpty()
    {
    	return buffer.isEmpty();
    }
}
