/**
 * A class that can make and play multiple guitar strings
 * 
 * @author (your name) 
 * @version (a version number or a date)
 */
import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.Label;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
public class Instrument implements Runnable
{   
    /**Keyboard layout
     * 
     * Notes:C  C#  D  D#  E  F  F#  G  G#  A  Bb  B  C  C#  D  D#  E
     * Keys: a  w   s  e   d  f  t   g  y   h  u   j  k  o   l  p   ;
     */
    
    private double sum;
    private Note[] note;
    
    private KeyBoard manual;
    private Frame frame;
    private Label label;
    
    public Instrument(String name)
    {
        manual = new KeyBoard(this);
        
    	sum = 0;
    	note = new Note[88];
    	for (int i=0; i<note.length; i++)
    	    note[i] = new Note(i);
    }
   
    /**
     * converts the key into the note and plucks it
     * 
     * @param h - key the player pressed
     */
    public void playNote(String h)
    {
        if (h.equals("a")) note[39].pluck();
        else if (h.equals("w")) note[40].pluck();
        else if (h.equals("s")) note[41].pluck();
        else if (h.equals("e")) note[42].pluck();
        else if (h.equals("d")) note[43].pluck();
        else if (h.equals("f")) note[44].pluck();
        else if (h.equals("t")) note[45].pluck();
        else if (h.equals("g")) note[46].pluck();
        else if (h.equals("y")) note[47].pluck();
        else if (h.equals("h")) note[48].pluck();
        else if (h.equals("u")) note[49].pluck();
        else if (h.equals("j")) note[50].pluck();
        else if (h.equals("k")) note[51].pluck();
    }
    
    public String convertToNoteName(String h)
    {
        if (h.equals("a")) return "C";
        else if (h.equals("w")) return "C#";
        else if (h.equals("s")) return "D";
        else if (h.equals("e")) return "D#";
        else if (h.equals("d")) return "E";
        else if (h.equals("f")) return "F";
        else if (h.equals("t")) return "F#";
        else if (h.equals("g")) return "G";
        else if (h.equals("y")) return "G#";
        else if (h.equals("h")) return "A";
        else if (h.equals("u")) return "Bb";
        else if (h.equals("j")) return "B";
        else if (h.equals("k")) return "C";
        return "?";
    }
    
    public Note findNote(String h)
    {
        if (h.equals("a")) return note[39];
        else if (h.equals("w")) return note[40];
        else if (h.equals("s")) return note[41];
        else if (h.equals("e")) return note[42];
        else if (h.equals("d")) return note[43];
        else if (h.equals("f")) return note[44];
        else if (h.equals("t")) return note[45];
        else if (h.equals("g")) return note[46];
        else if (h.equals("y")) return note[47];
        else if (h.equals("h")) return note[48];
        else if (h.equals("u")) return note[49];
        else if (h.equals("j")) return note[50];
        else if (h.equals("k")) return note[51];
        return null;
    }
    
    private void update()
    {
        sum = 0;
        for (int i=0; i<note.length; i++)
        {
            if (note[i].isPlucked())
            {
                if (note[i].isEmpty())
                    note[i].pluck();
            }
            else
            {
                if (note[i].time()>12000)
                {
                    note[i].silence();
                    note[i].setPlucked(false);
                }
            }
            note[i].tic();
            sum += note[i].sample();
        }
    }
    
    /**constantly run in a separate thread
     * it calls update
     * then plays the sum update changed it
     * @param none
     * @return none
     */
    public void run()
    {
    	while (true)
    	{
    		update();
    		AudioLib.play(sum);
    	}
    }
}
